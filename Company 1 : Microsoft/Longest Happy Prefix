class Solution {
    public String longestPrefix(String s) {
        long l = 0, r = 0, p = 1, mod = (long)1e9 + 7;
        int k = 0, n = s.length();
        for (int i = 0; i < n - 1; i++) {
            l = (l * 128 + s.charAt(i)) % mod;
            r = (r + p * s.charAt(n - i - 1)) % mod;
            if (l == r) k = i + 1;
            p = p * 128 % mod;
        }
        return s.substring(0, k);




        // HashMap<String,Integer> map=new HashMap<>();
        // for(int i=0;i<s.length()-1;i++){
        //     if(map.containsKey(s.substring(0,i+1))){
        //         map.put(s.substring(0,i+1),map.get(s.substring(0,i+1))+1);
        //     }else{
        //         map.put(s.substring(0,i+1),1);
        //     }
        // }
        // int size=0;
        // String ans="";
        // for(int i=s.length()-1;i>=0;i--){
        //     if(map.containsKey(s.substring(i))){
        //         if(size<s.substring(i).length()){
        //             size=s.substring(i).length();
        //             ans=s.substring(i);
        //         }

        //     }
        // }
        // return ans;
    }
}
